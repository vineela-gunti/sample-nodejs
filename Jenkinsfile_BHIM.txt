pipeline {
    options {
        // set a timeout of 60 minutes for this pipeline
        timeout(time: 60, unit: 'MINUTES')
    }
    agent {
      node {
          label 'nodejs'
      }
    }

    environment {
        TEST_PROJECT = "bhim-test"
        
		OPENSHIFT_REGISTRY = "default-route-openshift-image-registry.accelerite-openshift-la-fbc03b92adfe8eb26bb2ca99edfad3f7-0000.che01.containers.appdomain.cloud"
		NEXUS_REPO = "docker-nexus-repo.accelerite-openshift-la-fbc03b92adfe8eb26bb2ca99edfad3f7-0000.che01.containers.appdomain.cloud"
		OPENSHIFT_API= "https://c103-e.jp-tok.containers.cloud.ibm.com:32369"
		
		VERSION = "0.0.1"
		
		IAM_USER = credentials('IAM_User')
		NEXUS_USER = credentials('Nexus_User')
		
        APP_NAME = "bhim4"
        IAM_TOKEN = credentials('IAM_TOKEN')
    }

    stages {
        
	stage('Clone another repository to subdir') {
  steps {
    sh 'rm subdir -rf; mkdir subdir'
    dir ('subdir') {
      git branch: 'master',
        url: 'https://github.com/vineela-gunti/node-hello.git'
    }
    sh('ls -l')
  }
}
        stage('Pipeline Call') {
            steps {
                build(job: 'hello-world')
             }
        }
    
        stage('Compilation, JUnit Testing & Artifact Creation') {
            steps {
            	script {
                	
    					sh 'npm install --unsafe-perm=true --allow-root'
					
				}
            }
            
        } 
        
        stage('BHIM Deployment on Test Environment') {
            steps {              
                script {
                    openshift.withCluster(env.OPENSHIFT_API) {
						echo '### Creating a new project in Test env ###'
						sh '''
						    oc login --token=${IAM_TOKEN} --server=${OPENSHIFT_API}
							 if [ ! -z "$(oc get projects | grep ${TEST_PROJECT})" ]
							then
								echo "Deleting ${TEST_PROJECT} project"
								
									oc proxy &
									oc project ${TEST_PROJECT}
									oc delete --all all,secret,pvc > /dev/null
									oc get ns ${TEST_PROJECT} -o json > tempfile
									sed -i 's/"kubernetes"//g' tempfile
									
									curl -k -H "Content-Type: application/json" -X PUT --data-binary @tempfile http://127.0.0.1:8001/api/v1/namespaces/"${TEST_PROJECT}"/finalize
									sleep 50
									oc delete project ${TEST_PROJECT}
									sleep 50

							fi 
							
							echo '### Creating new project in Development ###'
						    oc new-project $TEST_PROJECT
						    oc create secret docker-registry redhat-registry-secret --docker-username="vineela_gunti" --docker-password=Welcome@9247107040 --docker-server=registry.redhat.io -n $TEST_PROJECT
						    oc secrets link builder redhat-registry-secret -n $TEST_PROJECT
						    oc secrets link default redhat-registry-secret --for=pull -n $TEST_PROJECT
						    
						    oc new-build --name=${APP_NAME} https://github.com/vineela-gunti/sample-nodejs --insecure-registry=true  -n ${TEST_PROJECT}
						    

						'''
						
                    }
                }
            }
        }

                stage('Wait for build to be ready') {
            steps {
                script {
                    openshift.withCluster() {
                        openshift.withProject( "${TEST_PROJECT}" ) {
                            def builds = openshift.selector("bc","${APP_NAME}").related('builds')
			      builds.untilEach(1) {
                                return (it.object().status.phase == "Complete")                            
			  }  
                        }
                    }
                }
            }
        }
		stage('Push Image to Nexus Repository') {
            steps {
                echo '### Copy image from openshift internal registry to Nexus repository ###'
                sh 'skopeo copy --src-creds=${IAM_USER} --dest-creds=${NEXUS_USER} --dest-tls-verify=false  docker://${OPENSHIFT_REGISTRY}/${TEST_PROJECT}/${APP_NAME}:latest docker://${NEXUS_REPO}/${APP_NAME}:latest'
            }
        }     
    
    
                stage('Deploy BHIM Application') {
            steps {              
                script {
                    openshift.withCluster(env.OPENSHIFT_API) {
						sh '''
						    oc login --token=${IAM_TOKEN} --server=${OPENSHIFT_API}
						    oc project $TEST_PROJECT
						    echo '### creating persistent volume and persistent volume claim ###'							
						    oc create -f ${bhim_pvc} -n ${TEST_PROJECT}
						    oc new-app --name ${APP_NAME} 169.38.133.228:5000/${APP_NAME}:latest --insecure-registry=true -n ${TEST_PROJECT}
						   ### oc new-app --name=${APP_NAME} ${APP_NAME}:latest -n ${TEST_PROJECT}
						    oc expose svc/${APP_NAME} -n ${TEST_PROJECT}
						    BHIM_VOLUME=$(oc describe pvc myclaim -n ${TEST_PROJECT} |  awk  ' FNR == 5 {print $2}')
                                                    oc set volume dc/${APP_NAME} --add --name=$BHIM_VOLUME --type=persistentVolumeClaim --claim-name=myclaim --mount-path=/mnt/data --containers=${APP_NAME}
						  ###  oc set volume dc/${APP_NAME} --add --name=bhim-volume --type=persistentVolumeClaim --claim-name=myclaim --mount-path=/mnt/data --containers=${APP_NAME}
						    oc create configmap bhim-config --from-file template/configuration.properties -n ${TEST_PROJECT}
						    ### oc create -f ${bhim_config} -n ${TEST_PROJECT}
						    oc set volume dc/${APP_NAME} --add --name=bhim-conf --type=configmap --mount-path=/etc/config --configmap-name=bhim-config
						    ### oc create -f ${bhim_secret} -n ${TEST_PROJECT}
						    oc create secret generic bhim-secret --from-file template/key.pem -n ${TEST_PROJECT}
						    oc set volume dc/${APP_NAME} --add --name=bhim-sec --type=secret --mount-path=/etc/secret --secret-name=bhim-secret
						'''
						
                    }
                }
            }
        }
    }
        post {
            failure {
            
                 mail bcc: '', body: "${currentBuild.currentResult}: Job ${env.JOB_NAME} build ${env.BUILD_NUMBER}\n More info at: ${env.BUILD_URL}", cc: '', from: '', replyTo: '', subject: "Jenkins Build ${currentBuild.currentResult}: Job ${env.JOB_NAME}", to: 'pslelm123456@gmail.com'
            
            
            }
        }
    
    }
