pipeline {
    options {
        // set a timeout of 60 minutes for this pipeline
        timeout(time: 60, unit: 'MINUTES')
    }
    agent {
      node {
          label 'nodejs'
      }
    }
    environment {
        ANCHORE_PROJECT = "anchore-test"
        
		OPENSHIFT_REGISTRY = "default-route-openshift-image-registry.accelerite-openshift-la-fbc03b92adfe8eb26bb2ca99edfad3f7-0000.che01.containers.appdomain.cloud"
		NEXUS_REPO = "docker-nexus-repo.accelerite-openshift-la-fbc03b92adfe8eb26bb2ca99edfad3f7-0000.che01.containers.appdomain.cloud"
		OPENSHIFT_API= "https://c103-e.jp-tok.containers.cloud.ibm.com:32369"
		
		VERSION = "0.0.1"
		
		IAM_USER = credentials('IAM_User')
		NEXUS_USER = credentials('Nexus_User')
		ANCHORE_REPO = "https://charts.anchore.io"
        IAM_TOKEN = credentials('IAM_TOKEN')
    }
    stages {
        
	stage('Clone another repository to subdir') {
  steps {
    sh 'rm subdir -rf; mkdir subdir'
    dir ('subdir') {
      git branch: 'master',
        url: 'https://github.com/vineela-gunti/node-hello.git'
    }
    sh('ls -l')
    sh 'cd subdir'
    sh 'pwd'
    sh 'ls'
  }
}

        stage('Redis Deployment on Test Environment') {
            steps {              
                script {
                    openshift.withCluster(env.OPENSHIFT_API) {
						echo '### Creating a new project in Test env ###'
						sh '''
						    oc login --token=${IAM_TOKEN} --server=${OPENSHIFT_API}
							 if [ ! -z "$(oc get projects | grep ${ANCHORE_PROJECT})" ]{ 
		
								oc proxy &
								oc project ${ANCHORE_PROJECT}
								oc import-image anchore-postgres --confirm --all --from docker.io/anchore/engine-db-preload --scheduled=true -n ${ANCHORE_PROJECT} 

					                  }
							else { 
						    echo '### Creating new project in Development ###'

						    oc new-project ${ANCHORE_PROJECT}
                                                    oc import-image anchore-postgres --confirm --all --from docker.io/anchore/engine-db-preload --scheduled=true -n ${ANCHORE_PROJECT} 

                                                 }
						'''    
						
						
                    }
                }
            }
        }
    }
 }
